<?php
// $Id$
/**
 * @file
 * Bring link of content to anothers content body quick.
 *
 * This module gives the posibility to bring links of
 * content in the side to your text-body very quickly
 * using a view, some funny hooks and tricky JS.
 *
 */

/**
 * Implementation of hook_perm().
 */

function node2node_perm() {
  return array('use node2node-button');
}
/**
 * Implementation of hook_menu().
 *
 * ##form-args:
 * Calls a custom function as callback for drupal_get_form
 * @see node2node_admin_settings()
 */

function node2node_menu() {
  //Defines the configuration page
  $items['admin/settings/node2node'] = array(
      'title' => t('node2node'),
      'description' => t('Configure node-types on which node2node should run'),
      'page callback' => 'drupal_get_form',
      //look: ##form-args
      'page arguments' => array('node2node_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'node2node.admin.inc',
      'type' => 'MENU_NORMAL_ITEM'
  );
  $items['node2node/add/js'] = array(
    'title' => t('Add a node'),
      'page callback' => 'node2node_show',
      'type' => 'MENU_CALLBACK',
      'access callback' => 'user_access',
      'access arguments' => array('use node2node-button')
  );
  return $items;
}

/**
 * node2node_js
 * helper for js-callback in node2node_menu
 */

function node2node_show() {
  $output = views_embed_view('node2nodeFilter_mycontent','default');
  return $output;
}
/**node2node_admin_settings
 * Implementation of hook_nodeapi().
 */

function node2node_form_alter(&$form, $form_state, $form_id) {
  //tell us the form-id on page-load

  $nodetypes = variable_get('node2node_nodetypes', array('Story'));
  $myformid = '';

  foreach ($nodetypes as $nodetype) {
    $nodetype_format = drupal_strtolower($nodetype);
    if ($form_id == $nodetype_format . '_node_form') {
      $myformid = $form_id;
    }
  }

  if (!empty($myformid)) {
  //defines a button in every nodeform calling it
  if ($form_id == $myformid) {
    $form['node2node_button'] = array(
      '#weight' => '0',
      '#type' => 'button',
      '#button_type' => 'button',
      '#title' => t('Insert your nodelinks to body'),
      '#value' => t('node2node-Link'),
      '#access' => user_access('use node2node-button'),
      //create button with an aha-callback on the event-listener
      '#ahah' => array(
      'path' => 'node2node/add/js',
        'progress' => array(
          'type' => 'throbber'
        ),
        'wrapper' => 'node2node-selection',
        'method' => 'replace',
      ),

    );
    }
  }
  return $form;
}
/*
function node2node_form_alter(&$form, $form_state, $form_id){
  drupal_set_message('Die Form-ID ist ' . $form_id);
}*/

/**
 * Implementation of hook_views_api().
 */
function node2node_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'node2node'),
    //'path' => drupal_get_path('module', 'node2node') . '/includes',
  );
}

/**
 * @todo: build a url containing mycontent-view
 * @todo: define an ajax-ready-listener to handle the html, got from the AHAH-Event_Listener
 * @todo: FIX : error-messages when insering new terms to blogcategory
 * @todo: build a container, which handels ahah-content
 * @todo: implementation of hook_theme()
 */
