<?php
// $Id$
/**
 * @file
 * Bring link of content to anothers content body quick.
 *
 * This module gives the posibility to bring links of
 * content in the side to your text-body very quickly
 * using a view, some funny hooks and tricky JS.
 *
 */

/**
 * Implementation of hook_perm().
 */

function node2node_perm() {
  return array('use node2node-button');
}
/**
 * Implementation of hook_menu().
 *
 * ##form-args:
 * Calls a custom function as callback for drupal_get_form
 * @see node2node_admin_settings()
 */

function node2node_menu() {
  //Defines the configuration page
  $items['admin/settings/node2node'] = array(
      'title' => t('node2node'),
      'description' => t('Configure node-types on which node2node should run'),
      'page callback' => 'drupal_get_form',
      //look: ##form-args
      'page arguments' => array('node2node_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'node2node.admin.inc',
      'type' => 'MENU_NORMAL_ITEM'
  );
  $items['node2node_add/js'] = array(
    'title' => t('Add a node'),
      'page callback' => 'node2node_show',
      'type' => 'MENU_CALLBACK',
      'access callback' => 'user_access',
      'access arguments' => array('use node2node-button')
  );
  return $items;
}


/**
 * node2node_js
 * helper for js-callback in node2node_menu
 */

function node2node_show() {
  $output = views_embed_view('node2node','default');
  return $output;
}
/**node2node_admin_settings
 * Implementation of hook_nodeapi().
 */

function node2node_form_alter(&$form, $form_state, $form_id) {
  //tell us the form-id on page-load

  $nodetypes = variable_get('node2node_nodetypes', array('Story'));
  $myformid = '';

  foreach ($nodetypes as $nodetype) {
    $nodetype_format = drupal_strtolower($nodetype);
    if ($form_id == $nodetype_format . '_node_form') {
      $myformid = $form_id;
    }
  }

  if (!empty($myformid)) {
  //defines a button in every nodeform calling it
  if ($form_id == $myformid) {
    $form['node2node_button'] = array(
      '#weight' => '0',
      '#type' => 'markup',
      '#prefix' => '<div class="node2node-link"><a href="/node2node_add/js">',
      '#value' => t('node2node-link'),
      '#suffix' => '</a></div>',
      '#access' => user_access('use node2node-button'),
    );
    }
  }
  return $form;
}


/**
 * Implementation of hook_views_api().
 */
function node2node_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'node2node'),
    //'path' => drupal_get_path('module', 'node2node') . '/includes',
  );
}

/**
 * Implementation of hook_init()
 * to load js
 */

function node2node_init(){
  if(arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit')){
    $output = theme('node2node_javascript');
  }
}

/**
 * Implementation of hook_theme()
 */
function node2node_theme(){
  return array(
    'node2node' => array(
      'arguments' => array('form' => NULL),
      'file' => 'node2node.theme.inc',
      'template' => 'node2node-link'
    ),
    'node2node_javascript' => array(
       'arguments' => array(),
    )
  );
}

/**
 * Build theme-functions
 */
function theme_node2node($button){
  $output .= drupal_render($button);
  return $output;
}
function theme_node2node_javascript(){
  jquery_ui_add(array('ui.draggable','ui.droppable','ui.dialog','ui.resizable'));
  drupal_add_js(drupal_get_path('module', 'node2node') . '/ui/node2node.js');
  drupal_add_css(drupal_get_path('module', 'node2node') . '/ui/node2node.css');
}

/**
 * Processing variables for themable output
 */
function theme_preprocess_node2node_link(&$variables){
  $variables['node2node'] = array();
  $variables['node2node']['href'] = base_path() . '/node2node_add/js';
  $variables['node2node']['title'] = 'node2node-Link';
}

/**
 * Implementation of hook_simpletest
 */
function node2node_simpletest(){
    $dir = drupal_get_path('module', 'node2node') . '/tests';
    $tests = file_scan_directory($dir, '\.test$');
    return array_keys($tests);
}
/**
 * @todo: FIX : error-messages when insering new terms to blogcategory
 * @todo: FIX: preprocess and template-file seem not to run
 */
